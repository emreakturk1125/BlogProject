
-> .Net 5.0
-> UnitOfWork
-> Generic Repository
-> Asenkron Programming
-> AutoMapper
-> WebUI kısmında "Microsoft.AspNetCore.Mvc.Razor.RuntimeCompil" kütüphanesi, frontend tarafında değişikliklerin anlık yansını sağlamak için
-> Toastr
-> (Toastr) EA.BlogProject.Shared, class library içine  "Microsoft.AspNetCore.Mvc" kütüphanesini ekledik. Toaster ile alaklı controller ekledik. Farklı projelerde de kullanılabilsin diye
yani shared katmmanın başka projelere ekle ve kullan diye
-> SweetAlert
-> Asp.Net Identity
-> Trumbowyg  (jquery text editörü),
-> Select2 (searchable dropdownlist)
-> NToastNotify (Bildirim işlemleri için kullanılabilir)
-> Authorization
-> Give Authorize to Users any pages from Web Pages (Sayfa üzerinde kullanıcılara yetki verme)
-> LinqKit kütüphanesi ile Ana sayfada ki Search kısımı için gereken işlemleri yaptık
-> Bootsnipp.com dan farklı şablonlar bulabilirsin.
-> Mail işlemleri için outlook smtp 
-> NLog kütüphanesi (https://github.com/NLog/NLog/wiki/Database-target)  => File & database log 

    * log atılacak tablonun create edimesi gerekir. Dokümentasyon için "NLog and SQL Server Example Configuration" başlığı altında fakat bizim code first olduğu için "Log" class'ı tanımladık ve migration işlemi yaptık
    * NLog, NLog.Web.AspNetCore, NLog.Database  paketlerini kurduk
    * WebUI içine nlog adında config dosyası ekledik (https://github.com/NLog/NLog/wiki/Getting-started-with-ASP.NET-Core-5)
    * File & database, her iki log işlemi de olsun diye nlog.config de düzenleme yaptık
    * Program.cs de dğer loggerları disabled etmemiz gerekiyor, nlog u kullanabilmek için 


-> Appsetting.config ile ilgili işlemler  (hem okuma hem de üzerine yazma işlemleri)

    * Appsettings.json dosyasından farklı yolla veri okuma işlemi yapıldı
    * WritetibleOptions adlı helper sınıfı  appsettings.json üzerine veri yazmayı sağlar  => ( EA.BlogProject.Shared içinde )
    * WritetibleOptions için "Microsoft.Extensions.Options.ConfigurationExtensions" kütüphanesinin de kurulması gerekir 

-> AsNoTracking işlemi => EfEntityRepositoryBase içindeki sorgularda kullanıldı. 
   
    * Sadece çekilen tabloyu getir ya da include edilen tablo varsa onunla birlikte getir demektir.
    * Birbirini referans eden kayıtların tekrar etmesini engelledik, büyük bir performans kazancı oluoyoruz.
    * AsNoTracking işlemi 1. farklı bir yöntem olarak alttaki şekilde de yapılabilir, yani  sorguların sonuna AsNoTracking() koymak yerine constructor da alttaki gibi kod eklenebilir. 
    *  Bu sorgulara otomatik AsNoTracking ekler. 
    // _context.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking; 
    * AsNoTracking işlemi 2. farklı bir yöntem olarak; Startup da tanımlanan DbContext sin sonuna alttaki kod parççaığı eklenebilir 
    // .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking)

-> FirstOrDefault() ile SingleOrDefault() farkı nedir?
   
   * SingleOrDefault; Yeni bir sorgu üretir.
   * FirstOrDefault; EntityFramework de cache mekanizması var, eğer cache de varsa ordan yüklüyor datayı.
    
     
Migration işlemi 
-----------------------
-> EA.BlogProject.Data  klasörünü cmd de açtıktan sonra
-> dotnet ef --startup-project ../EA.BlogProject.WebUI migrations add InitialCreate
-> dotnet ef --startup-project ../EA.BlogProject.WebUI database update
